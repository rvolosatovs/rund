// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobControllerClient is the client API for JobController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobControllerClient interface {
	// Start starts a job and returns an identifier that can be used to uniquely identify the started job.
	Start(ctx context.Context, in *JobStartRequest, opts ...grpc.CallOption) (*JobIdentifier, error)
	// Stop kills the running job and returns the exit code.
	Stop(ctx context.Context, in *JobIdentifier, opts ...grpc.CallOption) (*JobStatus, error)
	// Status returns the status of a job.
	Status(ctx context.Context, in *JobIdentifier, opts ...grpc.CallOption) (*JobStatus, error)
	// Log streams job logs.
	Log(ctx context.Context, in *JobIdentifier, opts ...grpc.CallOption) (JobController_LogClient, error)
}

type jobControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewJobControllerClient(cc grpc.ClientConnInterface) JobControllerClient {
	return &jobControllerClient{cc}
}

func (c *jobControllerClient) Start(ctx context.Context, in *JobStartRequest, opts ...grpc.CallOption) (*JobIdentifier, error) {
	out := new(JobIdentifier)
	err := c.cc.Invoke(ctx, "/rund.JobController/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobControllerClient) Stop(ctx context.Context, in *JobIdentifier, opts ...grpc.CallOption) (*JobStatus, error) {
	out := new(JobStatus)
	err := c.cc.Invoke(ctx, "/rund.JobController/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobControllerClient) Status(ctx context.Context, in *JobIdentifier, opts ...grpc.CallOption) (*JobStatus, error) {
	out := new(JobStatus)
	err := c.cc.Invoke(ctx, "/rund.JobController/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobControllerClient) Log(ctx context.Context, in *JobIdentifier, opts ...grpc.CallOption) (JobController_LogClient, error) {
	stream, err := c.cc.NewStream(ctx, &JobController_ServiceDesc.Streams[0], "/rund.JobController/Log", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobControllerLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JobController_LogClient interface {
	Recv() (*JobLog, error)
	grpc.ClientStream
}

type jobControllerLogClient struct {
	grpc.ClientStream
}

func (x *jobControllerLogClient) Recv() (*JobLog, error) {
	m := new(JobLog)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JobControllerServer is the server API for JobController service.
// All implementations must embed UnimplementedJobControllerServer
// for forward compatibility
type JobControllerServer interface {
	// Start starts a job and returns an identifier that can be used to uniquely identify the started job.
	Start(context.Context, *JobStartRequest) (*JobIdentifier, error)
	// Stop kills the running job and returns the exit code.
	Stop(context.Context, *JobIdentifier) (*JobStatus, error)
	// Status returns the status of a job.
	Status(context.Context, *JobIdentifier) (*JobStatus, error)
	// Log streams job logs.
	Log(*JobIdentifier, JobController_LogServer) error
	mustEmbedUnimplementedJobControllerServer()
}

// UnimplementedJobControllerServer must be embedded to have forward compatible implementations.
type UnimplementedJobControllerServer struct {
}

func (UnimplementedJobControllerServer) Start(context.Context, *JobStartRequest) (*JobIdentifier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedJobControllerServer) Stop(context.Context, *JobIdentifier) (*JobStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedJobControllerServer) Status(context.Context, *JobIdentifier) (*JobStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedJobControllerServer) Log(*JobIdentifier, JobController_LogServer) error {
	return status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (UnimplementedJobControllerServer) mustEmbedUnimplementedJobControllerServer() {}

// UnsafeJobControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobControllerServer will
// result in compilation errors.
type UnsafeJobControllerServer interface {
	mustEmbedUnimplementedJobControllerServer()
}

func RegisterJobControllerServer(s grpc.ServiceRegistrar, srv JobControllerServer) {
	s.RegisterService(&JobController_ServiceDesc, srv)
}

func _JobController_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobControllerServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rund.JobController/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobControllerServer).Start(ctx, req.(*JobStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobController_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobControllerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rund.JobController/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobControllerServer).Stop(ctx, req.(*JobIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobController_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobControllerServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rund.JobController/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobControllerServer).Status(ctx, req.(*JobIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobController_Log_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JobIdentifier)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobControllerServer).Log(m, &jobControllerLogServer{stream})
}

type JobController_LogServer interface {
	Send(*JobLog) error
	grpc.ServerStream
}

type jobControllerLogServer struct {
	grpc.ServerStream
}

func (x *jobControllerLogServer) Send(m *JobLog) error {
	return x.ServerStream.SendMsg(m)
}

// JobController_ServiceDesc is the grpc.ServiceDesc for JobController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rund.JobController",
	HandlerType: (*JobControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _JobController_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _JobController_Stop_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _JobController_Status_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Log",
			Handler:       _JobController_Log_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/api.proto",
}
